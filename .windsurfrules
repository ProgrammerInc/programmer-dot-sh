# Referral Buddy WindsurfRules
# These rules ensure consistent code generation and type safety

# Technology Stack
technology:
  frontend:
    framework: 'Vite'
    library: 'React'
    styling:
      primary: 'Tailwind CSS'
      secondary: 'CSS Modules'
    components: 'Radix UI'
  backend:
    runtime: 'Node.js'
    framework: 'Vite'
    database: 'Supabase PostgreSQL'
  language: 'TypeScript'
  packageManager: 'PNPM'
  apis:
    preferred: 'GraphQL'
    alternatives: 'REST API'
    documentation: 'OpenAPI'

# Global TypeScript settings
typescript:
  strictNullChecks: true
  noImplicitAny: true
  strictFunctionTypes: true
  strictBindCallApply: true
  noUncheckedIndexedAccess: true
  useUnknownInCatchVariables: true
  bestPractices: true
  forbiddenTypes:
    - 'any'
  forbiddenDirectives:
    - '@ts-expect-error'
    - '@ts-ignore'
  importAlias:
    '@/': true

# Naming Conventions
namingConventions:
  files:
    # Use kebab-case for files (e.g. /src/services/my-service/my-service.service.ts)
    general: 'kebab-case'
  code:
    # Use camelCase for variable and function names (e.g. myVariable and myFunction)
    variables: 'camelCase'
    functions: 'camelCase'
    # Use PascalCase for React components, classes, interfaces, and types
    components: 'PascalCase'
    classes: 'PascalCase'
    interfaces: 'PascalCase'
    types: 'PascalCase'
    # Use SNAKE_CASE for environment variables (e.g. MY_ENVIRONMENT_VARIABLE)
    envVariables: 'SNAKE_CASE'
    # Use PascalCase for enums and SNAKE_CASE for enum values
    enums: 'PascalCase'
    enumValues: 'SNAKE_CASE'

# File Organization
fileOrganization:
  structure:
    componentFiles:
      location: 'same-directory'
      maxLines: 300
      lazyLoading: true
  fileExtensions:
    typescript: '.ts'
    react: '.tsx'
    styles: '.module.css'
    classes: '.class.ts'
    commands: '.commands.ts'
    constants: '.constants.ts'
    context: '.context.tsx'
    hooks: '.hooks.ts'
    presets: '.presets.ts'
    providers: '.provider.tsx'
    reducers: '.reducer.ts'
    types: '.types.ts'
    services: '.service.ts'
    stories: '.stories.tsx'
    utils: '.utils.ts'
    variants: '.variants.ts'
    client: '.client.ts'
    server: '.server.ts'
  pluralization:
    enabled: true
    example: '.hook.ts for single, .hooks.ts for multiple'
  exports:
    useIndexFiles: true
    supportNamedAndDefault: true
    groupLocation: 'bottom'
    sort: 'alphabetical'
  imports:
    prefer: 'import'
    avoid: 'require'
    groupLocation: 'top'
    sort: 'alphabetical'
    groupByType: true
  sorting:
    arrays: 'alphabetical'
    objects: 'alphabetical'
    json:
      alphabetical: true
      exceptions: ['$schema', 'name', 'version']
    packageJson:
      dependencies: 'alphabetical'
      devDependencies: 'alphabetical'
      scripts: 'alphabetical'
      workspaces: 'alphabetical'
    refactoringOrder: 'alphabetical'

# Frontend Component Rules
components:
  # Extract variant definitions to separate files for Fast Refresh
  variantFiles:
    - pattern: 'src/components/ui/*.tsx'
      separateVariants: true
      variantSuffix: '.variants.tsx'

  # Type safety for component props
  props:
    preferTypeAlias: true
    avoidEmptyInterfaces: true
    unionTypesForVariants: true

  # Error handling patterns
  errorHandling:
    useTypeGuards: true
    avoidDirectErrorAccess: true

  # React directives
  directives:
    useClient: true
    useServer: true

  # Styling preferences
  styling:
    preferCssModules: true
    avoidInlineStyles: true

  # Performance
  performance:
    lazyLoadLargeComponents: true
    trackReRenders: true
    useWhyDidYouRender: true
    useMemoryTracker: true

# Deno Edge Functions Rules
denoEdgeFunctions:
  imports:
    std: 'https://deno.land/std@0.177.0/http/server.ts'
    supabase: 'https://esm.sh/@supabase/supabase-js@2.49.4'
    stripe: 'https://esm.sh/stripe@11.1.0?target=deno'

  typeDefinitions:
    request: true
    requestType: 'DenoRequest'
    errorInterface: true

  errorHandling:
    useTypeGuards: true
    errorTypeGuardFunction: 'isErrorWithMessage'

  codeStyle:
    unusedVariablePrefix: '_'
    forceExplicitTypeAnnotations: true

# Utility Module Rules
utilModules:
  typePatterns:
    - strongTyping: true
    - explicitGenerics: true
    - comprehensiveJsDoc: true

  namingConventions:
    - utils: '*.utils.ts'
    - helpers: '*.helpers.ts'
    - hooks: 'use-*.ts'

# Documentation Standards
documentation:
  code: 'JSDoc'
  api: 'OpenAPI'
  components: 'Storybook'
  general:
    - 'Markdown'
    - 'MDX'
  bestPractices:
    jsdoc: true
    markdown: true
    storybook: true
  component:
    overview: true
    featureList: true
    examples:
      simpleUsage: true
      advancedUsage: true
      responsiveExample: true
      customizationExample: true
    propsDocumentation:
      detailed: true
      defaultValues: true
  typeDefinitions:
    comprehensiveJsDoc: true
    externalLinks: true
    examples: true

# Development Tools
developmentTools:
  ide:
    - 'VSCode'
    - 'Windsurf'
    - 'Cursor'
  linting:
    code: 'ESLint'
    styles: 'Stylelint'
    markdown: 'Markdownlint'
  formatting: 'Prettier'
  configuration: 'EditorConfig'
  versionControl: 'GitHub'
  environmentVariables: 'DotENV'

# Quality Assurance
qualityAssurance:
  testing:
    unit: 'Jest'
    e2e: 'Playwright'
  monitoring:
    errors: 'Sentry'
    security: 'Snyk'
  codeQuality:
    removeUnused: true
    dryPrinciples: true
    solidPrinciples: true
    bestPractices:
      react: true
      accessibility: true
      performance: true
      security: true
      seo: true

# Logging and Debugging
logging:
  preferred: '@/services/logger'
  avoid: 'console'

# Deployment
deployment:
  platform: 'Netlify'
  bestPractices: true
  viteBuild: true

# Project Configuration
projectConfig:
  vscode:
    enableDeno: true
    fileAssociations:
      - 'supabase/functions/**/*.ts': 'typescriptreact.deno'

  deno:
    configPath: 'supabase/functions/deno.json'
    importMapPath: 'supabase/functions/import_map.json'

# Web Standards
webStandards:
  html: true
  css: true
  favicons: true
  openGraph: true
  robots: true

# Component Structure Standards (NEW)
componentStructure:
  requiredFiles:
    - '{component-name}.tsx' # Main component file
    - '{component-name}.types.ts' # Type definitions
    - '{component-name}.module.css' # CSS module
    - 'index.ts' # Barrel exports
  conditionalFiles:
    - '{component-name}.constants.ts' # When constants are needed
    - '{component-name}.utils.ts' # When utilities are needed
    - '{component-name}.hooks.ts' # When custom hooks are needed
    - '{component-name}.variants.ts' # When variants are needed
  subcomponents:
    location: 'same-directory' # Or "subdirectory" for larger components
    naming: '{parent-name}-{subcomponent}.tsx'

# Component Implementation Standards (NEW)
componentImplementation:
  performance:
    memoization:
      required: true
      implementation: 'React.memo'
    displayName:
      required: true
      format: '{PascalCaseName}'
  documentation:
    jsDoc:
      required: true
      sections:
        - description
        - example
        - param
        - returns
    componentDocumentation:
      features: true
      usageExamples: true
      accessibilityNotes: true
  accessibility:
    ariaAttributes: true
    screenReaderSupport: true
    keyboardNavigation: true

# CSS Module Standards (NEW)
cssModules:
  naming:
    convention: 'kebab-case'
    classNamingPattern: '{component-name}-{element}'
  bestPractices:
    cssVariables: true
    responsiveDesign: true
    darkModeSupport: true
  organization:
    grouping: 'by-component-section'
    ordering: 'logical-flow'
    comments: true
  utilities:
    preferred: 'cn'
    implementation: 'clsx/tailwind-merge'

# Animation Component Standards (NEW)
animationComponents:
  fileStructure:
    constants:
      required: true
      contents:
        - 'defaultAnimationParams'
        - 'cssClasses'
    utils:
      required: true
      contents:
        - 'animationHelpers'
        - 'calculationUtilities'
    hooks:
      required: true
      contents:
        - 'animationSetup'
        - 'cleanupHandling'
  libraries:
    framerMotion:
      properTyping: true
      memoryOptimization: true
    gsap:
      scrollTrigger:
        cleanup: true
        ssrSupport: true
      properTyping: true
  accessibility:
    reducedMotion: true
    alternativeContent: true

# Refactoring Process Guidelines (NEW)
refactoringProcess:
  steps:
    - name: 'extractTypes'
      description: 'Extract and properly document all types in a separate file'
    - name: 'extractConstants'
      description: 'Move hardcoded values to constants file with proper documentation'
    - name: 'createCssModule'
      description: 'Convert Tailwind classes to CSS module with kebab-case naming'
    - name: 'extractUtilities'
      description: 'Move helper functions to utils file'
    - name: 'extractHooks'
      description: 'Create custom hooks for stateful logic'
    - name: 'refactorComponent'
      description: 'Update component to use all extracted parts'
    - name: 'updateExports'
      description: 'Ensure proper exports in index.ts'
  qualityChecks:
    - 'No inline styles remain'
    - "All 'any' types are replaced with proper types"
    - 'All JSDoc comments are comprehensive'
    - 'React.memo is applied to all components'
    - 'displayName is set for all components'
    - 'All CSS classes follow kebab-case convention'
    - 'All files follow kebab-case naming'
